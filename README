===========================
 How to create a new panel
===========================


Basics
======

At least two files are needed to create a new panel. A qml file which
contains the panel implementation and a .panel file which contains
basic information of the panel.

See panelsrc/example/ for a full panel example.

Here is an example of .panel file::

  [Panel]
  DisplayName=Example
  DisplayName[fi]=Esimerkki
  DefaultIndex=6
  UniqueName=example
  Path=/usr/share/meego-ux-panels/example/examplepanel.qml

Panels are based on FlipPanel which is found in MeeGo.Panels 0.1
package. FlipPanel contains basic integration to panels and the two
sides (front and back) for panel specific content items.

Here is an example of quite minimal panel with empty front side and
standard back side without any settings::

  import Qt 4.7
  import MeeGo.Panels 0.1

  FlipPanel {
      id: container

      front: Panel {
          id: testPanel
          panelTitle: qsTr("Test")
      }

      back: BackPanelStandard {
          panelTitle: qsTr("Test settings")
          subheaderText: qsTr("Test panel content")

          onClearHistClicked:{
             console.log("Clear history clicked!");
          }
      }
  }

Content visual components
=========================

There are several components that can be used to maintain consistent
look.

SimplePanel and Panel
---------------------

SimplePanel and Panel provide basic panel look: header (property
panelTitle) and content area with proper backgrounds.

Front side header background is::

  image://themedimage/widgets/apps/panels/panel-header-<panel-unique-name>

where <panel-unique-name> can be set in .panel file (UniqueName). If
unique name is not set in .panel file it is then set to the basename
of of the .panel (e.g. if you have mypanel.panel then unique name is
mypanel).

Example snippet of using Panel::

    .
    .
    .
    front: Panel {
        id: examplePanel
        panelTitle: qsTr("Example")
        panelContent: contents
    }
    .
    .
    .
    VisualItemModel {
        id: contents
	<insert your contents here>
    }
    .
    .
    .

Example snippet of using SimplePanel::

    .
    .
    .
    front: SimplePanel {
        id: examplePanel
        panelTitle: qsTr("Example")
        panelComponent: <insert your content Component here>
    }
    .
    .
    .

PanelExpandableContent
----------------------

PanelExpandableContent is the basic component for a block of content
in Panel or SimplePanel. It contains an optional header (property
text) and a content component (property contents). Header can be
hidden by settings showHeader property to false. Width of
PanelExpandableContent.contents is set by PanelExpandableContent while
height is determined by contents.

Tiles
-----

Panel content is organized in three kind of tiles: primary tiles,
secondary tiles and list items. Each of these has matching component
available: PrimaryTile, SecondaryTile / SecondaryTileBase /
SecondaryTileGridItem and TileListItem. Primary tiles should be put
inside PrimaryTileGrid while secondary tiles can be in list style
(SecondaryTile and SecondaryTileBase) or in a SecondaryTileGrid. List
items will naturally be put in list. All tile items are base on
TileItem that provides support of standard interaction by forwarding
signals pressAndHold and clicked from internal MouseArea and a
separator (property separatorVisible) when tile is part of a list.

PrimaryTileGrid organizes PrimaryTiles in a grid with 2 columns.

SecondaryTileGrid organizes SecondaryTileGridItems in a grid with 4 columns.

PanelColumnView organizes SecondaryTiles or TileListItems in a column.

TileIcon provides 4 types of background to panel icons: empty, normal,
item and album. The background is selected by setting imageBackground
property. The image set to imageSource property is given space that
depends on the selected background.

BackPanelStandard and BackPanelGeneric
-----------------------------------

These helper classes for creating a standard looking panel back
side. BackPanelStandard helps you create multiple sections that can be
toggled on and off. You just have create a list model which contains
the section names and visibility settings and set it to
BackPanelStandard.settingsListModel property. In this back settings
model each ListElement should contain settingsTitle, custPropName and
isVisible properties. Additionally the visibility of the sections
(typically PanelExpandableContent) should set their visibility based
on this model. Panels common code will take care of storing these
values across boot.

Example::

    ListModel{
        id: backSettingsModel

        ListElement {
            settingsTitle: QT_TR_NOOP("Primary grid")
            custPropName: QT_TR_NOOP("PrimaryGrid")
            isVisible: true
        }
        ListElement {
            settingsTitle: QT_TR_NOOP("Secondary grid")
            custPropName: QT_TR_NOOP("SecondaryGrid")
            isVisible: true
        }
        ListElement {
            settingsTitle: QT_TR_NOOP("Secondary list")
            custPropName: QT_TR_NOOP("SecondaryList")
            isVisible: true
        }
        ListElement {
            settingsTitle: QT_TR_NOOP("ListItem list")
            custPropName: QT_TR_NOOP("ListItemList")
            isVisible: true
        }

    }

BackPanelStandard also includes an optional "Clear history" button
which will send clearHistClicked() signal.

If you don't need these or want to add something of your own you can
use BackPanelGeneric and it's bpContent property. BackPanelGeneric
includes standard panel settings section.

For something completely custom you can base your back panel to Panel or
SimplePanel and set isBackPanel property true.


